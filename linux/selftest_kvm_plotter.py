#!/bin/env python

"""
Plotter script for the data generated by the runner
"""

import os
import re
import sys
from enum import Enum
from pathlib import Path
from typing import Match

import matplotlib.pyplot as plt
import numpy as np
from numpy.typing import ArrayLike

CWD = Path(__file__)

UARF_PATH: Path = Path(os.environ.get("UARF_PATH", Path.home() / "uARF"))
DATA_PATH: Path = UARF_PATH / "data"

if not UARF_PATH.is_dir():
    print(f"Uarf repo does not exist at '{UARF_PATH}'")

if not DATA_PATH.is_dir():
    print(f"Uarf data does not exist at '{DATA_PATH}'")


class Domain(Enum):
    """Represents the domain of a virtualized environment."""

    HU = "HU"
    HS = "HS"
    GU = "GU"
    GS = "GS"


domains = [e.value for e in Domain]


HOST = "cn128"

#      Host     __FROM     _TO       __#Cands   __#Rep    __#Train  __Mitig    .raw
FILENAME_PATTERN = re.compile(
    r"^([^_]+)__([^_]+)_([^_]+)__([^_]+)__([^_]+)__([^_]+)__([^\.]+).raw"
)

all_data_files: list[tuple[Path, Match[str]]] = [
    (DATA_PATH / e, match)
    for e in os.listdir(DATA_PATH)
    if (match := FILENAME_PATTERN.match(e)) is not None
]


# hits = [Node][Key]
num_hits: dict[str, dict[str, ArrayLike]] = {}


for t in all_data_files:
    p, m = t

    cmp_file = p.with_suffix(".cmp")

    assert cmp_file.is_file(), "CMP file does not exist"

    node = m.group(1)
    td = m.group(2)
    sd = m.group(3)
    num_cands = m.group(4)
    num_reps = m.group(5)
    num_train = m.group(6)
    mitigation = m.group(7)

    key = f"{num_cands}__{num_reps}__{num_train}__{mitigation}"

    # TODO: Assert that format is correct
    hits, total = map(int, open(cmp_file, "r").read().strip().split("\t"))
    signal = hits / total

    x = domains.index(td)
    y = domains.index(sd)

    print(f"[{node}][{key}][{x}][{y}] = {hits} {total} = {signal}")

    if node not in num_hits:
        num_hits[node] = {}

    if key not in num_hits[node]:
        num_hits[node][key] = np.full((len(domains), len(domains)), -1.0, dtype=float)

    num_hits[node][key][x][y] = signal

for node in num_hits.keys():
    keys = list(num_hits[node].keys())

    for key in keys:
        print(node, key)
        print(num_hits[node][key])

        matrix = num_hits[node][key]

        # Sort keys to ensure consistent ordering
        from_values = domains
        to_values = domains

        # Plot using matplotlib
        fig, ax = plt.subplots()
        cax = ax.imshow(matrix, interpolation="nearest", cmap="viridis", vmax=1, vmin=0)

        # Draw lines
        for i in range(4):
            plt.hlines(i - 0.5, -0.5, 3.5, color="black")
            plt.vlines(i - 0.5, -0.5, 3.5, color="black")

        # Label axes
        ax.xaxis.tick_top()
        ax.xaxis.set_label_position('top') 
        ax.set_xticks(np.arange(len(to_values)))
        ax.set_yticks(np.arange(len(from_values)))
        ax.set_xticklabels(to_values)
        ax.set_yticklabels(from_values)

        plt.xlabel("Signal")
        plt.ylabel("Train")
        plt.title(f"{node} {key}")

        # Add colorbar
        fig.colorbar(cax)

        # Show the plot
        # plt.tight_layout()
        # plt.show()
        out_path = DATA_PATH / f"{node}__{key}.png"
        plt.savefig(out_path, bbox_inches="tight", pad_inches=0.0)


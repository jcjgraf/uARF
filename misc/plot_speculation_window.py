#!/bin/env python

# Generated by ChatGPT

import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib as mpl

# Enable LaTeX text rendering
mpl.rcParams.update(
    {
        # "text.usetex": True,
        "font.family": "serif",
        "font.serif": [
            "Times New Roman"
        ],  # or "Computer Modern" if you prefer default LaTeX fonts
        "axes.labelsize": 10,
        "axes.titlesize": 12,
        "xtick.labelsize": 9,
        "ytick.labelsize": 9,
        "legend.fontsize": 9,
        "axes.linewidth": 0.8,
        "xtick.direction": "in",
        "ytick.direction": "in",
        "grid.linestyle": "--",
        "grid.linewidth": 0.5,
        "pdf.fonttype": 42,
        "pgf.rcfonts": False,  # Do not override LaTeX fonts
    }
)

# Read data
y_l1 = [4016]
y_l2 = [4096, 4096, 4093, 4005, 3991, 10]
y_l3 = [
    4096,
    4095,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4096,
    4096,
    4094,
    4094,
    4092,
    4092,
    4003,
    3984,
    3968,
    11,
    5,
    4,
    1,
    7,
    3,
    6,
    1,
    4,
    5,
    2,
    4,
    1,
    2,
    2,
    2,
    1,
    2,
    2,
    4,
    7,
    2,
    1,
    4,
    2,
    4,
    4,
    1,
    4,
    2,
    1,
    3,
    1,
    2,
    1,
    5,
    1,
    1,
    1,
    3,
    1,
    2,
    4,
    1,
    6,
    3,
    5,
    3,
    3,
    3,
    3,
    4,
    2,
    6,
    4,
    3,
    2,
    3,
    3,
    3,
    3,
    4,
    3,
    3,
    1,
]
y_ram = [
    4096,
    4095,
    4095,
    4095,
    4096,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4096,
    4095,
    4096,
    4095,
    4094,
    4095,
    4096,
    4095,
    4094,
    4094,
]

# total_tries = 4096
# max_len = 100
# x = range(1, max_len + 1)
# y_l1 += (max_len - len(y_l1)) * [0]
# y_l2 += (max_len - len(y_l2)) * [0]
# y_l3 += (max_len - len(y_l3)) * [0]
# y_ram += (max_len - len(y_ram)) * [0]
# y_l1 = [(100 * y / total_tries) for y in y_l1]
# y_l2 = [(100 * y / total_tries) for y in y_l2]
# y_l3 = [(100 * y / total_tries) for y in y_l3]
# y_ram = [(100 * y / total_tries) for y in y_ram]


# Plot
fig, ax = plt.subplots(figsize=(3.5, 1.6), layout="constrained")  # 3.5 inch for single column

rects = ax.bar([0,1,2,3], [1, 5, 17, 88], color="#202020", fill=True)
ax.bar_label(rects, padding=3)
# ax.plot(x, y_l1, markersize=3, linestyle="-", linewidth=1, color="black")
# ax.plot(x, y_l2, markersize=3, linestyle="-", linewidth=1, color="green")
# ax.plot(x, y_l3, markersize=3, linestyle="-", linewidth=1, color="red")
# ax.plot(x, y_ram, markersize=3, linestyle="-", linewidth=1, color="blue")

# ax.set_xscale("log", base=2)
# ax.set_yscale("log", base=2)

# Limits
# ax.set_xlim(min(x) * 0.9, max(x) * 1.1)
# ax.set_ylim(2**-0.2, 2**9 + 1)
ax.set_ylim(0, 100)

# Labels (with LaTeX syntax)
ax.set_xlabel(r"Cache Level")
ax.set_ylabel(r"Window Size [Loads]")
# ax.set_title(r"Speculation Window Size by Cache Level", pad=8)

# Ticks
# y_lbl = [2**i for i in range(10)]
ax.tick_params(axis=u'x', which=u'both',length=0)
ax.set_xticks([0,1,2,3])
ax.set_xticklabels(["L1", "L2", "L3", "RAM"])
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())

# Grid (only major y)
ax.grid(True, which="major", axis="y")

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# fig.tight_layout()

# Save to PGF (LaTeX-ready)
# fig.savefig("memory_access_latency_ieee.pgf")
# fig.savefig("memory_access_latency_ieee.pdf")
fig.savefig("speculation_window_ieee.pdf")
